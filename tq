[1mdiff --git a/src/CMakeLists.txt b/src/CMakeLists.txt[m
[1mindex fb7e7a0..b1b872d 100644[m
[1m--- a/src/CMakeLists.txt[m
[1m+++ b/src/CMakeLists.txt[m
[36m@@ -6,6 +6,7 @@[m [mlist(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake/")[m
 find_package(GLFW3 REQUIRED)[m
 find_package(GLEW REQUIRED)[m
 find_package(OpenGL REQUIRED)[m
[32m+[m[32mfind_package(OpenCV REQUIRED)[m
 [m
 set(SOURCE_EXE[m
     main.cpp[m
[36m@@ -16,15 +17,15 @@[m [mset(SOURCE_EXE[m
     DummyBrowser.cpp[m
     FileBrowser.h[m
     FileBrowser.cpp[m
[31m-    browser.cpp[m
     device.h[m
 )[m
 [m
 add_executable(${PROJECT_NAME} ${SOURCE_EXE})[m
 [m
[31m-#target_include_directories(${PROJECT_NAME})# PRIVATE ${GLFW3_INCLUDE_DIR} ${GLEW_INCLUDE_DIRS} ${OPENGL_INCLUDE_DIR})[m
[32m+[m[32mtarget_include_directories(${PROJECT_NAME} PRIVATE ${GLFW3_INCLUDE_DIR} ${GLEW_INCLUDE_DIRS} ${OPENGL_INCLUDE_DIR})[m
[32m+[m[32mtarget_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ${OpenCV_INCLUDE_DIR})[m
 [m
[31m-target_link_libraries(${PROJECT_NAME} PRIVATE ${GLFW3_LIBRARY} ${GLEW_LIBRARIES} ${OPENGL_LIBRARIES} ${nlohmann_json_LIBRARY})[m
[32m+[m[32mtarget_link_libraries(${PROJECT_NAME} PRIVATE ${GLFW3_LIBRARY} ${GLEW_LIBRARIES} ${OPENGL_LIBRARIES} ${OpenCV_LIBRARIES} ${nlohmann_json_LIBRARY})[m
 [m
 #target_include_directories(${PROJECT_NAME}[m
 #    PRIVATE ${CMAKE_CURRENT_BINARY_DIR}[m
[1mdiff --git a/src/MainView.cpp b/src/MainView.cpp[m
[1mindex 3455087..045bf8c 100644[m
[1m--- a/src/MainView.cpp[m
[1m+++ b/src/MainView.cpp[m
[36m@@ -3,11 +3,9 @@[m
 //#define NK_IMPLEMENTATION[m
 #include "nuklear.h"[m
 [m
[31m-#define STB_IMAGE_IMPLEMENTATION[m
[31m-#include "stb_image.h"[m
[31m-[m
 #include <GL/glew.h>[m
 #include <GLFW/glfw3.h>[m
[32m+[m[32m#include <opencv2/opencv.hpp>[m
 [m
 #include <fstream>[m
 #include <stdexcept>[m
[36m@@ -19,25 +17,31 @@[m [mconst std::string CFG_LATEST_SEEN = "latest_seen";[m
 [m
 struct nk_image load_image(const char *filename, struct image_meta *image_meta) // throw std::runtine_error[m
 {[m
[32m+[m[32m    using namespace cv;[m
[32m+[m
     int x,y,n;[m
     GLuint tex;[m
     GLint ifmt;[m
     GLenum fmt;[m
 [m
[31m-    unsigned char *data = stbi_load(filename, &x, &y, &n, 0);[m
[32m+[m[32m    Mat im = imread(filename, IMREAD_UNCHANGED);[m
 [m
[31m-    if (!data) {[m
[32m+[m[32m    if (im.empty()) {[m
         throw std::runtime_error(std::string("Can't open image file: '") + filename + "'");[m
     }[m
 [m
[32m+[m[32m    x = im.size().width;[m
[32m+[m[32m    y = im.size().height;[m
[32m+[m[32m    n = im.elemSize();[m
[32m+[m
     switch (n) {[m
         case 2: ifmt = GL_RG8; fmt = GL_RG; break;[m
[31m-        case 3: ifmt = GL_RGB8; fmt = GL_RGB; break;[m
[31m-        case 4: ifmt = GL_RGBA8; fmt = GL_RGBA; break;[m
[32m+[m[32m        case 3: ifmt = GL_RGB8; fmt = GL_BGR; break;[m
[32m+[m[32m        case 4: ifmt = GL_RGBA8; fmt = GL_BGRA; break;[m
         default: ifmt = GL_R8; fmt = GL_R; break;[m
     }[m
 [m
[31m-    // OpenGL default alignment is 4, correct it if necessary[m
[32m+[m[32m    // OpenGL default alignment is 4, correct it if necessery[m
     glPixelStorei(GL_UNPACK_ALIGNMENT, (x * n) % 4 ? 1 : 4);[m
 [m
     glGenTextures(1, &tex);[m
[36m@@ -46,15 +50,15 @@[m [mstruct nk_image load_image(const char *filename, struct image_meta *image_meta)[m
     glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR_MIPMAP_NEAREST);[m
     glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);[m
     glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);[m
[31m-    glTexImage2D(GL_TEXTURE_2D, 0, ifmt, x, y, 0, fmt, GL_UNSIGNED_BYTE, data);[m
[32m+[m[32m    glTexImage2D(GL_TEXTURE_2D, 0, ifmt, x, y, 0, fmt, GL_UNSIGNED_BYTE, im.ptr());[m
     glGenerateMipmap(GL_TEXTURE_2D);[m
[31m-    stbi_image_free(data);[m
 [m
     if (image_meta) {[m
         image_meta->w = x;[m
         image_meta->h = y;[m
         image_meta->n = n;[m
     }[m
[32m+[m
     return nk_image_id((int)tex);[m
 }[m
 [m
[1mdiff --git a/src/browser.cpp b/src/browser.cpp[m
[1mdeleted file mode 100644[m
[1mindex 772c924..0000000[m
[1m--- a/src/browser.cpp[m
[1m+++ /dev/null[m
[36m@@ -1,42 +0,0 @@[m
[31m-#include "browser.h"[m
[31m-#include <list>[m
[31m-#include <string>[m
[31m-[m
[31m-typedef std::list<std::string> strings;[m
[31m-[m
[31m-extern "C" {[m
[31m-[m
[31m-browser_handler img_browser_create() {[m
[31m-    return new strings();[m
[31m-}[m
[31m-[m
[31m-void img_browser_free(browser_handler bh) {[m
[31m-    delete (strings *)bh;[m
[31m-}[m
[31m-[m
[31m-browser_item img_iterator_begin(browser_handler bh) {[m
[31m-    return new strings::iterator(((strings *)bh)->begin());[m
[31m-}[m
[31m-[m
[31m-void img_iterator_free(browser_item i) {[m
[31m-    delete (strings::iterator *)(i);[m
[31m-}[m
[31m-[m
[31m-browser_item img_iterator_next(browser_item i) {[m
[31m-    ((strings::iterator *)(i))->operator ++();[m
[31m-    return i;[m
[31m-}[m
[31m-[m
[31m-int img_iterator_is_end(browser_handler bh, browser_item i) {[m
[31m-    return ((strings *)bh)->end() == *((strings::iterator *)(i));[m
[31m-}[m
[31m-void img_append(browser_handler bh, const char *name) {[m
[31m-    ((strings *)bh)->push_back(name);[m
[31m-}[m
[31m-[m
[31m-const char *img_browser_get_name(browser_handler bh, browser_item i) {[m
[31m-    return (*(strings::iterator *)(i))->c_str();[m
[31m-}[m
[31m-[m
[31m-}[m
[31m-[m
[1mdiff --git a/src/browser.h b/src/browser.h[m
[1mdeleted file mode 100644[m
[1mindex 1d2da30..0000000[m
[1m--- a/src/browser.h[m
[1m+++ /dev/null[m
[36m@@ -1,28 +0,0 @@[m
[31m-#ifndef __BROWSER_H__[m
[31m-#define __BROWSER_H__[m
[31m-[m
[31m-#ifdef __cplusplus[m
[31m-extern "C" {[m
[31m-#endif[m
[31m-[m
[31m-#define browser_handler void *[m
[31m-#define browser_item void *[m
[31m-[m
[31m-browser_handler img_browser_create();[m
[31m-void            img_browser_free(browser_handler bh);[m
[31m-[m
[31m-void            img_append(browser_handler bh, const char *name);[m
[31m-const char      *img_browser_get_name(browser_handler bh, browser_item i);[m
[31m-[m
[31m-browser_item    img_iterator_begin(browser_handler bh);[m
[31m-void            img_iterator_free(browser_item i);[m
[31m-browser_item    img_iterator_next(browser_item i);[m
[31m-int             img_iterator_is_end(browser_handler bh, browser_item i);[m
[31m-[m
[31m-[m
[31m-#ifdef __cplusplus[m
[31m-}[m
[31m-#endif [m
[31m-[m
[31m-#endif /* __BROWSER_H__ */[m
[31m-[m
[1mdiff --git a/src/main.cpp b/src/main.cpp[m
[1mindex 49c8d87..c2401c8 100644[m
[1m--- a/src/main.cpp[m
[1m+++ b/src/main.cpp[m
[36m@@ -2,7 +2,6 @@[m
 #include "device.h"[m
 #include <fstream>[m
 #include <nlohmann/json.hpp>[m
[31m-#include "browser.h"[m
 #include "FileBrowser.h"[m
 [m
 #ifndef _WIN32[m
